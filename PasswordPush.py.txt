#!/usr/bin/env python

## Custom Module Imports ##

import yaml
import requests
import argparse
import os
import sys

## Parse Command Line arguments ##

if not len(sys.argv) > 1:
	print "usage: PushPassword.py [-h] -a APP -e ENV -v VAULTNM -p VAULTPW -i ISSECURE"
	print "OR									"
	print "usage: PushPassword.py [--help] --app APP --env ENV --vaultNM VAULTNM --vaultPW VAULTPW --isSecure ISSECURE "
	print ""
	print "Please run the script with correct parameters"
	exit()
  
parser = argparse.ArgumentParser(description='Program to Push Passwords from Ansible Vault to Urban Code')
parser.add_argument('-a','--app', help='Application Name', required=True)
parser.add_argument('-e','--env', help='Environment Name', required=True)
parser.add_argument('-v','--vaultNM', help='Vault Name', required=True)
parser.add_argument('-p','--vaultPW', help='Vault Password', required=True)
parser.add_argument('-i','--isSecure', help='Password Encrytion True/False', required=True)
args = parser.parse_args()

## Test Some Command Line Arguments

if not (args.isSecure == "true"  or args.isSecure == "false" ): 
	print  'The Value of parameter isSecure must be either "true" or "false" '
	print  'Please run the script with correct value'
	exit()


application=args.app
environment=args.env
isSecure=args.isSecure
mapping_file="mappings/" + application + "-password.yaml"
print "Mapping File is " + mapping_file

## Custom Module Imports ##

from pythonlib.UC_rest import *

## Set VaultPW in Urban Code ##

setEnvPropValue( application=application , environment=environment , name='vaultPW' , value=args.vaultPW , isSecure=isSecure )



## Get credentials to login into Stash & Fetch vault.yml ##

git_cmd = "git archive --remote=ssh://git@stash.trinet-devops.com:7999/con/global-app-configuration.git HEAD:group_vars/common-" + args.vaultNM + " vault.yml | tar x"
print "Executing Command : " , git_cmd 
os.system(git_cmd)

## Reading Vault File vault.yml ##
from ansible.constants import DEFAULT_VAULT_ID_MATCH
from ansible.parsing.vault import VaultLib
from ansible.parsing.vault import VaultSecret

vault = VaultLib([(DEFAULT_VAULT_ID_MATCH, VaultSecret(args.vaultPW))])
vault_temp = vault.decrypt(open('vault.yml').read())
vault_data =yaml.load(vault_temp)
os.remove('vault.yml')

## Reading Password Mapping File ##

mapping_data = open(mapping_file).read()
mapping_dict =yaml.load(mapping_data)

for vault_pmt , uc_pmt in mapping_dict.items():
 print "Vault Parameter is " , vault_pmt
 print "UrbanCode Parameter is " , uc_pmt
 print "Vault value is " , vault_data[vault_pmt]
 if isinstance (uc_pmt, list):
    for uc_pmt_list in uc_pmt:
    	print "setting password for " + uc_pmt_list
    	resp=setEnvPropValue( application=application , environment=environment , name=uc_pmt_list , value=vault_data[vault_pmt] , isSecure=isSecure )
    	if resp.status_code != 200:
    		print "HTTP Response Code is " + str(resp.status_code)
    		print "Process Failed . Please resolve the issue and rerun"
    		exit()
 else:
    print "setting password for " + uc_pmt
    resp=setEnvPropValue( application=application , environment=environment , name=uc_pmt , value=vault_data[vault_pmt] , isSecure=isSecure )
    if resp.status_code != 200:
    	print "HTTP Response Code is " + str(resp.status_code)
    	print "Process Failed . Please resolve the issue and rerun"
    	exit()
